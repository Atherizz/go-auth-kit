// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package simple

import (
	"github.com/google/wire"
	"io"
	"os"
)

// Injectors from injector.go:

func InitializeService(isError bool) (*SampleService, error) {
	sampleRepository := NewSampleRepository(isError)
	sampleService, err := NewSampleService(sampleRepository)
	if err != nil {
		return nil, err
	}
	return sampleService, nil
}

// MULTIPLE BINDING
func InitializeDatabaseRepository() *DatabaseRepository {
	databasePostgreeSql := NewDatabasePostgreSQL()
	databaseMySql := NewDatabaseMySQL()
	databaseRepository := NewDatabase(databasePostgreeSql, databaseMySql)
	return databaseRepository
}

func InitializeUserProfileService() *UserProfileService {
	userRepository := NewUserRepository()
	userService := NewUserService(userRepository)
	profileRepository := NewProfileRepository()
	profileService := NewProfileService(profileRepository)
	userProfileService := NewUserProfileService(userService, profileService)
	return userProfileService
}

func InitializeDashboardService() *DashboardService {
	showDashboardImpl := NewShowDashboardImpl()
	dashboardService := NewDashboardService(showDashboardImpl)
	return dashboardService
}

// STRUCT PROVIDER
func InitializeUserProfile(password2 string) *UserProfile {
	user := NewUser()
	profile := NewProfile(password2)
	userProfile := &UserProfile{
		User:    user,
		Profile: profile,
	}
	return userProfile
}

func InitializeUserProfileUsingValue(password2 string) *UserProfile {
	user := _wireUserValue
	profile := _wireProfileValue
	userProfile := &UserProfile{
		User:    user,
		Profile: profile,
	}
	return userProfile
}

var (
	_wireUserValue    = &User{}
	_wireProfileValue = &Profile{}
)

func BuildProfilService(username2 *username, password2 *password) *ProfilService {
	profil := NewProfil(username2, password2)
	profilActionImpl := NewProfilActionImpl(profil)
	profilService := NewProfilService(profilActionImpl)
	return profilService
}

func InitializerReader() io.Reader {
	reader := _wireFileValue
	return reader
}

var (
	_wireFileValue = os.Stdin
)

// Membuat provider dari field yang ada di provider lain
func InitailizeConfiguration() *Configuration {
	apllication := NewApplication()
	configuration := apllication.Configuration
	return configuration
}

func InitializeConnection(name string) (*Connection, func()) {
	file, cleanup := NewFile(name)
	connection, cleanup2 := NewConnection(file)
	return connection, func() {
		cleanup2()
		cleanup()
	}
}

// injector.go:

// PROVIDER SET
var userSet = wire.NewSet(NewUserRepository, NewUserService)

var profileSet = wire.NewSet(NewProfileRepository, NewProfileService)

// BINDING INTERFACE
var dashboardSet = wire.NewSet(
	NewShowDashboardImpl, wire.Bind(new(ShowDashboard), new(*ShowDashboardImpl)),
)

var userProfileSet = wire.NewSet(NewUser, NewProfile)

// BINDING VALUE
var userProfileValueSet = wire.NewSet(wire.Value(&User{}), wire.Value(&Profile{}))
